import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:silencia/core/theme/theme.dart';
import 'package:silencia/core/theme/theme_manager.dart';
import 'package:silencia/core/routes/app_router.dart'; // <- import du router
import 'package:silencia/core/service/notification_service.dart';
import 'package:silencia/core/service/logging_service.dart';
import 'package:silencia/core/service/app_health_service.dart';
import 'package:silencia/core/service/cache_service.dart';
import 'package:silencia/core/service/app_lifecycle_service.dart';
import 'package:silencia/core/service/animation_service.dart';
import 'package:silencia/core/service/image_cache_service.dart';
import 'package:silencia/core/service/profile_cache_service.dart';
import 'package:silencia/core/widgets/biometric_auth_overlay.dart';
import 'package:silencia/core/utils/rsa_migration.dart'; // üîê Migration RSA critique
import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialiser le service de logs en premier
  await logger.initialize();

  try {
    logger.info('üî• Initialisation Firebase...');
    // Initialiser Firebase avec les options de configuration
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    logger.info('‚úÖ Firebase initialis√© avec succ√®s');

    // Initialiser les services essentiels
    await _initializeServices();

  } catch (e, stackTrace) {
    logger.error('‚ùå Erreur lors de l\'initialisation Firebase', e, stackTrace);
    // Continuer m√™me en cas d'erreur pour permettre le d√©marrage de l'app
  }

  // Initialiser le gestionnaire de th√®me
  logger.info('üé® Initialisation du gestionnaire de th√®me...');
  await globalThemeManager.initTheme();
  logger.info('‚úÖ Gestionnaire de th√®me initialis√©');

  logger.info('üöÄ D√©marrage de l\'application...');
  runApp(MyApp());
}

// Initialisation des services essentiels
Future<void> _initializeServices() async {
  try {
    // üîê CRITIQUE: V√©rifier et ex√©cuter la migration RSA en premier
    logger.info('üîê V√©rification de la migration RSA...');
    try {
      final migrationSuccess = await RSAMigration.checkAndMigrate();
      if (migrationSuccess) {
        logger.info('‚úÖ Migration RSA v√©rifi√©e/compl√©t√©e');
        // Afficher le rapport en mode debug
        await RSAMigration.printMigrationReport();
      } else {
        logger.warning('‚ö†Ô∏è Migration RSA en attente (sera effectu√©e au prochain login)');
      }
    } catch (e, stackTrace) {
      logger.error('‚ùå Erreur lors de la migration RSA', e, stackTrace);
      // Ne pas bloquer le d√©marrage de l'app
    }

    // Initialiser le service de sant√© de l'app
    logger.info('üíä Initialisation du service de sant√©...');
    await AppHealthService().initialize();

    // Initialiser le service de cache
    logger.info('üíæ Initialisation du service de cache...');
    await CacheService().cleanExpired(); // Nettoyer le cache expir√© au d√©marrage

    // Initialiser le service de cycle de vie pour l'authentification
    logger.info('üîê Initialisation du service de cycle de vie...');
    await AppLifecycleService().initialize();

    // Pr√©charger les animations essentielles
    logger.info('üé® Pr√©chargement des animations...');
    await AnimationService().preloadEssentialAnimations();

    // Initialiser le cache d'images
    logger.info('üñºÔ∏è Initialisation du cache d\'images...');
    await ImageCacheService().initialize();

    // Synchroniser le cache de profil si possible
    logger.info('üë§ Synchronisation du cache de profil...');
    final profileCache = ProfileCacheService();
    await profileCache.syncWithServerIfOnline();

    // Initialiser les notifications de mani√®re asynchrone
    _initializeNotificationsAsync();

    logger.info('‚úÖ Services essentiels initialis√©s');
  } catch (e) {
    logger.error('‚ùå Erreur lors de l\'initialisation des services', e);
  }
}

// Initialisation asynchrone des notifications pour √©viter de bloquer le d√©marrage
void _initializeNotificationsAsync() {
  Future.delayed(const Duration(seconds: 2), () async {
    try {
      logger.info('üì± Initialisation diff√©r√©e du service de notifications...');
      await NotificationService().initialize();
      logger.info('‚úÖ Service de notifications initialis√©');
    } catch (e) {
      logger.error('‚ùå Erreur lors de l\'initialisation des notifications', e);
    }
  });
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final AppLifecycleService _lifecycleService = AppLifecycleService();
  bool _showAuthOverlay = false;
  bool _isInitialAuthChecked = false;

  @override
  void initState() {
    super.initState();
    _setupAuthenticationCallbacks();
    _checkInitialAuthentication();
  }

  void _setupAuthenticationCallbacks() {
    _lifecycleService.setAuthenticationCallbacks(
      onAuthenticationRequired: () {
        if (mounted) {
          setState(() {
            _showAuthOverlay = true;
          });
        }
      },
      onAuthenticationSuccess: () {
        if (mounted) {
          setState(() {
            _showAuthOverlay = false;
          });
        }
      },
      onAuthenticationFailed: () {
        if (mounted) {
          setState(() {
            _showAuthOverlay = false;
          });
          // Optionnel: fermer l'application ou rediriger vers login
        }
      },
    );
  }

  Future<void> _checkInitialAuthentication() async {
    // V√©rifier l'authentification au d√©marrage
    final authRequired = !await _lifecycleService.checkInitialAuthentication();

    if (mounted) {
      setState(() {
        _showAuthOverlay = authRequired;
        _isInitialAuthChecked = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: globalThemeManager,
      builder: (context, child) {
        return ValueListenableBuilder<bool>(
          valueListenable: material3Notifier,
          builder: (context, useMaterial3, __) {
            return MaterialApp.router(
              debugShowCheckedModeBanner: false,
              title: 'Silencia',
              theme: globalThemeManager.themeData,
              routerConfig: appRouter,
              builder: (context, child) {
                // Afficher l'overlay d'authentification si n√©cessaire
                if (_showAuthOverlay && _isInitialAuthChecked) {
                  return Stack(
                    children: [
                      child ?? const SizedBox.shrink(),
                      BiometricAuthOverlay(
                        onAuthenticationSuccess: () {
                          setState(() {
                            _showAuthOverlay = false;
                          });
                        },
                        onAuthenticationFailed: () {
                          setState(() {
                            _showAuthOverlay = false;
                          });
                        },
                      ),
                    ],
                  );
                }
                return child ?? const SizedBox.shrink();
              },
            );
          },
        );
      },
    );
  }
}
